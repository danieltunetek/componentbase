{"version":3,"file":"your-component-base.cjs.js","sources":["../src/theme/ThemeContext.tsx","../src/components/IconWrapper.tsx","../src/components/Button.tsx"],"sourcesContent":["import React, { createContext, useContext } from \"react\";\r\nimport { Theme } from \"./Types\"; // Import the main Theme interface\r\n\r\n// Define a minimal default theme structure.\r\n// The actual values will come from the consuming project.\r\nconst defaultTheme: Theme = {\r\n  colorTokens: {},\r\n  fontSizeTokens: { small: {}, medium: {}, large: {} },\r\n  iconSizeTokens: { small: {}, medium: {}, large: {} },\r\n  spacingTokens: { small: {}, medium: {}, large: {} },\r\n  borderRadiusTokens: {},\r\n};\r\n\r\nconst ThemeContext = createContext<Theme>(defaultTheme);\r\n\r\nexport const ThemeProvider: React.FC<{\r\n  theme: Theme;\r\n  children: React.ReactNode;\r\n}> = ({ theme, children }) => {\r\n  // You might want to merge the provided theme with defaults here\r\n  // for robustness, but for now, we'll just use the provided theme.\r\n  return <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>;\r\n};\r\n\r\nexport const useTheme = (): Theme => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\r\n  }\r\n  // Basic check to ensure the theme isn't completely empty if needed\r\n  if (Object.keys(context.colorTokens).length === 0) {\r\n      console.warn(\"ThemeContext: colorTokens appear to be empty. Ensure the theme is provided correctly.\");\r\n  }\r\n  return context;\r\n};","// src/components/IconWrapper.tsx (in your component base)\r\n\r\nimport React from \"react\";\r\nimport { useTheme } from \"../theme/ThemeContext\";\r\n// Import only the *types* needed for props, not the token values\r\nimport { IconSizeSubset, SizeCategory } from \"../theme/Types\";\r\n\r\ninterface IconWrapperProps {\r\n  // Use the types defined in theme/types.ts\r\n  size: IconSizeSubset;\r\n  sizeCategory: SizeCategory;\r\n  children: React.ReactNode;\r\n  color?: string; // Keep for data-attribute or potential direct styling needs\r\n  className?: string;\r\n}\r\n\r\nconst IconWrapper: React.FC<IconWrapperProps> = ({\r\n  size,\r\n  sizeCategory,\r\n  children,\r\n  color,\r\n  className,\r\n}) => {\r\n  // Get theme tokens from the context provided by the consuming project\r\n  const { iconSizeTokens } = useTheme();\r\n\r\n  // Access the correct size value from the theme context\r\n  const dimensions = iconSizeTokens[sizeCategory]?.[size];\r\n\r\n  // Handle cases where dimensions might not be found in the provided theme\r\n  if (!dimensions) {\r\n    console.warn(\r\n      `IconWrapper: iconSizeToken not found in the provided theme for sizeCategory='${sizeCategory}', size='${size}'. Falling back to default size '24px'.`\r\n    );\r\n  }\r\n\r\n  const combinedClassName = `${color ? \"colored-icon-wrapper\" : \"\"} ${\r\n    className || \"\"\r\n  }`.trim();\r\n\r\n  return (\r\n    <div\r\n      className={combinedClassName}\r\n      style={{\r\n        width: dimensions || \"24px\", // Fallback if dimensions is undefined in theme\r\n        height: dimensions || \"24px\", // Fallback if dimensions is undefined in theme\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        overflow: \"hidden\",\r\n      }}\r\n      // data-icon-color could be used by consuming project's CSS if needed\r\n      data-icon-color={color || \"\"}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IconWrapper;\r\n","// src/components/Button.tsx (in your component base)\r\n\r\nimport React from \"react\";\r\nimport { useTheme } from \"../theme/ThemeContext\";\r\nimport IconWrapper from \"./IconWrapper\";\r\nimport \"./Button.css\"; // Keep base structural CSS\r\n\r\n// Import only the types needed for props\r\nimport {\r\n  ColorCategory,\r\n  SizeCategory,\r\n  IconSizeSubset,\r\n  SpacingSizeSubset, // If needed for specific padding/gap keys\r\n  FontSizeSubset,   // If needed for specific font size keys\r\n} from \"../theme/Types\";\r\n\r\ninterface ButtonProps {\r\n  color: ColorCategory; // Use the exported type\r\n  height: \"32\" | \"36\" | \"42\" | \"60\" | string; // Allow string for custom heights potentially defined in theme\r\n  sizeCategory: SizeCategory; // Use the exported type\r\n  iconLeft?: boolean;\r\n  iconRight?: boolean;\r\n  onClick?: () => void;\r\n  children?: React.ReactNode;\r\n  iconLeftPath?: React.ReactNode;\r\n  iconRightPath?: React.ReactNode;\r\n  iconColor?: string; // Allow direct override\r\n  loader?: React.ReactNode;\r\n  disabled?: boolean;\r\n  variant: \"filled\" | \"outlined\";\r\n  iconSize?: IconSizeSubset; // Use the exported type\r\n  className?: string;\r\n  borderFull?: boolean;\r\n  // Optional: Explicit keys for padding/gap/font if needed, otherwise derive\r\n  // gapSize?: SpacingSizeSubset;\r\n  // paddingSize?: SpacingSizeSubset;\r\n  // fontSize?: FontSizeSubset;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n  color,\r\n  height,\r\n  sizeCategory,\r\n  iconLeft = false,\r\n  iconRight = false,\r\n  onClick,\r\n  children,\r\n  iconLeftPath,\r\n  iconRightPath,\r\n  iconColor,\r\n  loader,\r\n  disabled = false,\r\n  variant = \"filled\",\r\n  iconSize,\r\n  className = \"\",\r\n  borderFull = false,\r\n}) => {\r\n  // Get all theme tokens from context\r\n  const {\r\n    colorTokens,\r\n    fontSizeTokens,\r\n    spacingTokens, // Use spacing tokens for gap/padding\r\n    iconSizeTokens,\r\n    borderRadiusTokens,\r\n  } = useTheme();\r\n\r\n  const isIconOnly = !children && (iconLeft || iconRight || loader);\r\n\r\n  // Get the color token object for the specified category from the theme\r\n  const colors = colorTokens[color];\r\n  if (!colors) {\r\n      console.warn(`Button: Color category '${color}' not found in provided theme. Styles may not apply correctly.`);\r\n  }\r\n\r\n  // --- Determine CSS variables using theme tokens ---\r\n  const cssVariables: Record<string, string | number> = {\r\n    // Direct height prop\r\n    \"--button-height\": typeof height === 'string' && height.endsWith('px') ? height : `${height}px`,\r\n\r\n    // Opacity from theme or fallback\r\n    \"--button-opacity-disabled\": colors?.disabledOpacity || \"0.3\", // Use theme value\r\n\r\n    // Border radius from theme\r\n    \"--button-border-radius\": borderFull\r\n      ? borderRadiusTokens?.full || \"9999px\" // Use theme value\r\n      : borderRadiusTokens?.base || \"4px\", // Use theme value\r\n\r\n    // Gap from theme's spacing tokens (e.g., using 'size-1' for gap)\r\n    \"--button-gap\": spacingTokens[sizeCategory]?.[\"size-1\"] || \"4px\", // Example key\r\n\r\n    // Padding from theme's spacing tokens (e.g., using 'size-0' and 'size-4')\r\n    \"--button-top-padding\": spacingTokens[sizeCategory]?.[\"size-0\"] || \"0px\", // Example key\r\n    \"--button-right-padding\": spacingTokens[sizeCategory]?.[\"size-4\"] || \"16px\", // Example key\r\n    \"--button-bottom-padding\": spacingTokens[sizeCategory]?.[\"size-0\"] || \"0px\", // Example key\r\n    \"--button-left-padding\": spacingTokens[sizeCategory]?.[\"size-4\"] || \"16px\", // Example key\r\n\r\n    // Font size from theme's font size tokens (e.g., using 'size-4')\r\n    \"--button-font-size\": fontSizeTokens[sizeCategory]?.[\"size-4\"] || \"16px\", // Example key\r\n  };\r\n\r\n  // --- Set Variant-Specific CSS Variables using theme tokens ---\r\n  if (variant === \"filled\") {\r\n    cssVariables[\"--button-bg-color\"] = colors?.default || \"#000\"; // Use theme value\r\n    cssVariables[\"--button-bg-color-hover\"] = colors?.hover || \"#333\"; // Use theme value\r\n    cssVariables[\"--button-bg-color-active\"] = colors?.active || \"#555\"; // Use theme value\r\n    cssVariables[\"--button-bg-color-disabled\"] = colors?.disabled || \"#888\"; // Use theme value\r\n\r\n    // Text colors (often fixed for filled, but could be themed)\r\n    cssVariables[\"--button-text-color\"] = \"#fff\"; // Or potentially colors?.contrastText || '#fff'\r\n    cssVariables[\"--button-text-color-hover\"] = \"#fff\";\r\n    cssVariables[\"--button-text-color-active\"] = \"#fff\";\r\n    cssVariables[\"--button-text-color-disabled\"] = \"#fff\";\r\n\r\n    cssVariables[\"--button-border-color\"] = \"transparent\";\r\n    cssVariables[\"--button-border-color-hover\"] = \"transparent\";\r\n    cssVariables[\"--button-border-color-active\"] = \"transparent\";\r\n    cssVariables[\"--button-border-color-disabled\"] = \"transparent\";\r\n\r\n    // Icon color (respects override, defaults to text color)\r\n    cssVariables[\"--button-icon-color\"] = iconColor || cssVariables[\"--button-text-color\"];\r\n  } else { // Outlined\r\n    cssVariables[\"--button-bg-color\"] = \"transparent\";\r\n    cssVariables[\"--button-bg-color-hover\"] = \"transparent\"; // Or maybe a subtle color from theme?\r\n    cssVariables[\"--button-bg-color-active\"] = \"transparent\"; // Or maybe a subtle color from theme?\r\n    cssVariables[\"--button-bg-color-disabled\"] = \"transparent\";\r\n\r\n    cssVariables[\"--button-text-color\"] = colors?.default || \"#000\"; // Use theme value\r\n    cssVariables[\"--button-text-color-hover\"] = colors?.hover || \"#333\"; // Use theme value\r\n    cssVariables[\"--button-text-color-active\"] = colors?.active || \"#555\"; // Use theme value\r\n    cssVariables[\"--button-text-color-disabled\"] = colors?.disabled || \"#888\"; // Use theme value\r\n\r\n    cssVariables[\"--button-border-color\"] = colors?.default || \"#000\"; // Use theme value\r\n    cssVariables[\"--button-border-color-hover\"] = colors?.hover || \"#333\"; // Use theme value\r\n    cssVariables[\"--button-border-color-active\"] = colors?.active || \"#555\"; // Use theme value\r\n    cssVariables[\"--button-border-color-disabled\"] = colors?.disabled || \"#888\"; // Use theme value\r\n\r\n    // Icon color (respects override, defaults to text color)\r\n    cssVariables[\"--button-icon-color\"] = iconColor || cssVariables[\"--button-text-color\"];\r\n  }\r\n\r\n  // Determine icon size using theme's iconSizeTokens\r\n  // Fallback logic might need adjustment based on how height relates to icon sizes in your theme\r\n  const effectiveIconSize: IconSizeSubset =\r\n    iconSize ||\r\n    (() => {\r\n      // Example: Map height to a default icon size key if not provided\r\n      switch (height) {\r\n        case \"32\": return iconSizeTokens[sizeCategory]?.xs || \"xs\";\r\n        case \"36\": return iconSizeTokens[sizeCategory]?.sm || \"sm\";\r\n        case \"42\": return iconSizeTokens[sizeCategory]?.md || \"md\";\r\n        case \"60\": return iconSizeTokens[sizeCategory]?.lg || \"lg\";\r\n        default:   return iconSizeTokens[sizeCategory]?.md || \"md\"; // Default fallback\r\n      }\r\n    })();\r\n\r\n  return (\r\n    <button\r\n      className={`button button--${variant} ${\r\n        isIconOnly ? \"icon-only\" : \"\"\r\n      } ${className}`} // Removed body-short-sm, should be handled by consuming project or base CSS\r\n      disabled={disabled}\r\n      onClick={disabled ? undefined : onClick}\r\n      style={cssVariables as React.CSSProperties}\r\n    >\r\n      {iconLeft && iconLeftPath && !loader && (\r\n        <IconWrapper\r\n          className=\"icon-left\" // More specific class\r\n          size={effectiveIconSize}\r\n          sizeCategory={sizeCategory}\r\n        >\r\n          {iconLeftPath}\r\n        </IconWrapper>\r\n      )}\r\n\r\n      {loader && (\r\n        <IconWrapper\r\n          className=\"loader-wrapper\"\r\n          size={effectiveIconSize}\r\n          sizeCategory={sizeCategory}\r\n        >\r\n          {loader}\r\n        </IconWrapper>\r\n      )}\r\n\r\n      {children && <span className=\"button-text\">{children}</span>}\r\n\r\n      {iconRight && iconRightPath && !loader && (\r\n        <IconWrapper\r\n          className=\"icon-right\" // More specific class\r\n          size={effectiveIconSize}\r\n          sizeCategory={sizeCategory}\r\n        >\r\n          {iconRightPath}\r\n        </IconWrapper>\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n"],"names":["defaultTheme","ThemeContext","createContext","ThemeProvider","theme","children","useTheme","context","useContext","IconWrapper","size","sizeCategory","color","className","iconSizeTokens","dimensions","_a","combinedClassName","jsx","Button","height","iconLeft","iconRight","onClick","iconLeftPath","iconRightPath","iconColor","loader","disabled","variant","iconSize","borderFull","colorTokens","fontSizeTokens","spacingTokens","borderRadiusTokens","isIconOnly","colors","cssVariables","_b","_c","_d","_e","_f","effectiveIconSize","jsxs"],"mappings":"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"}