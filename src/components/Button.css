/* src/styles/Button.css (in your component base) */

.button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--button-border-radius); /* Set by component */
    cursor: pointer;
    text-align: center;
    outline: none;
    border-style: solid; /* Needed for outlined variant */
    border-width: var(--button-border-width); /* Set by variant */
    max-width: fit-content;
    white-space: nowrap;
    text-decoration: none; /* Reset default button styles */
    vertical-align: middle; /* Align with text */
    transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease, opacity 0.2s ease;
  
    /* Dynamic properties set via inline style */
    height: var(--button-height);
    gap: var(--button-gap);
    padding: var(--button-top-padding) var(--button-right-padding) var(--button-bottom-padding) var(--button-left-padding);
    font-size: var(--button-font-size);
    font-weight: 500; /* Or make this a theme variable */
    color: var(--button-text-color);
    background-color: var(--button-bg-color);
    border-color: var(--button-border-color);
  }
  
  .button.icon-only {
    padding: 0; /* Override padding */
    width: var(--button-height); /* Make width equal to height */
    aspect-ratio: 1 / 1;
    gap: 0; /* No gap needed */
  }
  
  /* Variant Styles */
  .button--filled {
    --button-border-width: 0px; /* No border */
  }
  
  .button--outlined {
    --button-border-width: 1px; /* Or make this a theme variable */
    /* Background is already set to transparent by component logic */
  }
  
  /* States */
  .button:not(:disabled):hover {
    color: var(--button-text-color-hover);
    background-color: var(--button-bg-color-hover);
    border-color: var(--button-border-color-hover);
  }
  
  .button:not(:disabled):active {
    color: var(--button-text-color-active);
    background-color: var(--button-bg-color-active);
    border-color: var(--button-border-color-active);
  }
  
  .button:disabled {
    cursor: not-allowed;
    color: var(--button-text-color-disabled);
    background-color: var(--button-bg-color-disabled);
    border-color: var(--button-border-color-disabled);
    opacity: var(--button-opacity-disabled);
  }
  
  /* Focus styles - Use a theme variable for focus ring color */
  .button:focus-visible {
    outline: 2px solid var(--theme-focus-ring-color, #0066cc); /* Consuming project defines --theme-focus-ring-color */
    outline-offset: 2px;
  }
  
  /* Icon Color - Relies on --button-icon-color set by component */
  .button .icon-wrapper,
  .button .loader-wrapper {
    color: var(--button-icon-color);
    display: flex; /* Ensure wrapper itself is flex */
    align-items: center;
    justify-content: center;
  }
  
  /* Ensure SVGs within the wrapper inherit the color */
  .button .icon-wrapper svg,
  .button .loader-wrapper svg {
    fill: currentColor;
    /* You might need width/height: 100% here depending on IconWrapper/SVG structure */
    width: 100%;
    height: 100%;
  }
  
  /* Text span */
  .button .button-text {
    display: inline-block; /* Keep text on one line */
  }
  
  